<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>(*&#xD;
	SENSOR MONITOR - CORRECTED&#xD;
	COBOD INTERNATIONAL 2025&#xD;
*)&#xD;
&#xD;
// Startup delay&#xD;
tonSensorStartup(IN:=TRUE, PT:=T#500MS);&#xD;
bSensorsReady := tonSensorStartup.Q;&#xD;
&#xD;
IF bSensorsReady THEN&#xD;
	&#xD;
	// ========== FLOW SENSOR (4-20mA) ==========&#xD;
	&#xD;
	IF ai_Flow_4to20mA &lt; 5734 THEN&#xD;
		bFlowSensorFault := TRUE;&#xD;
		bFlowSensorWarning := FALSE;&#xD;
		rFlowRate_LPM_Raw := 0.0;&#xD;
		iFlowFaultCode := 1;&#xD;
		&#xD;
	ELSIF ai_Flow_4to20mA &lt; 6553 THEN&#xD;
		bFlowSensorFault := FALSE;&#xD;
		bFlowSensorWarning := TRUE;&#xD;
		rFlowRate_LPM_Raw := 0.0;&#xD;
		iFlowFaultCode := 2;&#xD;
		&#xD;
	ELSIF ai_Flow_4to20mA &gt; 37683 THEN&#xD;
		bFlowSensorFault := TRUE;&#xD;
		bFlowSensorWarning := FALSE;&#xD;
		rFlowRate_LPM_Raw := 1.5;&#xD;
		iFlowFaultCode := 3;&#xD;
		&#xD;
	ELSIF ai_Flow_4to20mA &gt; 32767 THEN&#xD;
		bFlowSensorFault := FALSE;&#xD;
		bFlowSensorWarning := TRUE;&#xD;
		rFlowRate_LPM_Raw := 1.5;&#xD;
		iFlowFaultCode := 4;&#xD;
		&#xD;
	ELSE&#xD;
		bFlowSensorFault := FALSE;&#xD;
		bFlowSensorWarning := FALSE;&#xD;
		iFlowFaultCode := 0;&#xD;
		&#xD;
		rFlowRate_LPM_Raw := ((INT_TO_REAL(ai_Flow_4to20mA) - 6553.0) / 26214.0) * 1.45 + 0.05;&#xD;
		&#xD;
		IF rFlowRate_LPM_Raw &lt; 0.05 THEN&#xD;
			rFlowRate_LPM_Raw := 0.0;&#xD;
		END_IF;&#xD;
		&#xD;
		IF rFlowRate_LPM_Raw &gt; 1.5 THEN&#xD;
			rFlowRate_LPM_Raw := 1.5;&#xD;
		END_IF;&#xD;
		&#xD;
	END_IF;&#xD;
	&#xD;
	// Flow filtering&#xD;
	arFlowHistory[iFlowFilterIndex] := rFlowRate_LPM_Raw;&#xD;
	iFlowFilterIndex := iFlowFilterIndex + 1;&#xD;
	IF iFlowFilterIndex &gt;= 10 THEN&#xD;
		iFlowFilterIndex := 0;&#xD;
	END_IF;&#xD;
	&#xD;
	rFlowRate_LPM := (arFlowHistory[0] + arFlowHistory[1] + arFlowHistory[2] + arFlowHistory[3] + arFlowHistory[4] +&#xD;
	                  arFlowHistory[5] + arFlowHistory[6] + arFlowHistory[7] + arFlowHistory[8] + arFlowHistory[9]) / 10.0;&#xD;
	&#xD;
	&#xD;
	// ========== PRESSURE SENSOR (IO-Link) ==========&#xD;
&#xD;
bPressureDataValid := (bPressure_StatusByte AND 16#01) = 16#01;&#xD;
&#xD;
IF bPressureDataValid THEN&#xD;
    bPressureSensorFault := FALSE;&#xD;
    iPressureFaultCode := 0;&#xD;
    &#xD;
    wPressure := SHL(BYTE_TO_WORD(awPressure_Data[0]), 8) OR BYTE_TO_WORD(awPressure_Data[1]);&#xD;
    rPressure_Bar_Raw := (WORD_TO_REAL(wPressure) / 65535.0) * 11.0 - 1.0;&#xD;
    &#xD;
    IF rPressure_Bar_Raw &lt; -1.0 THEN&#xD;
        rPressure_Bar_Raw := -1.0;&#xD;
    END_IF;&#xD;
    &#xD;
    IF rPressure_Bar_Raw &gt; 10.0 THEN&#xD;
        rPressure_Bar_Raw := 10.0;&#xD;
    END_IF;&#xD;
    &#xD;
ELSE&#xD;
    bPressureSensorFault := TRUE;&#xD;
    iPressureFaultCode := 10;&#xD;
    &#xD;
END_IF;&#xD;
	&#xD;
	// Pressure filtering&#xD;
	IF bPressureDataValid THEN&#xD;
		arPressureHistory[iPressureFilterIndex] := rPressure_Bar_Raw;&#xD;
		iPressureFilterIndex := iPressureFilterIndex + 1;&#xD;
		IF iPressureFilterIndex &gt;= 10 THEN&#xD;
			iPressureFilterIndex := 0;&#xD;
		END_IF;&#xD;
		&#xD;
		rPressure_Bar := (arPressureHistory[0] + arPressureHistory[1] + arPressureHistory[2] + arPressureHistory[3] + arPressureHistory[4] +&#xD;
		                  arPressureHistory[5] + arPressureHistory[6] + arPressureHistory[7] + arPressureHistory[8] + arPressureHistory[9]) / 10.0;&#xD;
	END_IF;&#xD;
	&#xD;
	bAnySensorFault := bFlowSensorFault OR bPressureSensorFault;&#xD;
	bAnySensorWarning := bFlowSensorWarning;&#xD;
	&#xD;
END_IF;&#xD;
&#xD;
// Watchdog timers&#xD;
IF ABS(rFlowRate_LPM - rFlowRate_LPM_Last) &gt; 0.01 THEN&#xD;
	tonFlowWatchdog(IN:=FALSE);&#xD;
	rFlowRate_LPM_Last := rFlowRate_LPM;&#xD;
ELSE&#xD;
	tonFlowWatchdog(IN:=TRUE, PT:=T#30S);&#xD;
	IF tonFlowWatchdog.Q AND (rFlowRate_LPM &gt; 0.05) THEN&#xD;
		bFlowSensorWarning := TRUE;&#xD;
		iFlowFaultCode := 5;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
IF ABS(rPressure_Bar - rPressure_Bar_Last) &gt; 0.05 THEN&#xD;
	tonPressureWatchdog(IN:=FALSE);&#xD;
	rPressure_Bar_Last := rPressure_Bar;&#xD;
ELSE&#xD;
	tonPressureWatchdog(IN:=TRUE, PT:=T#30S);&#xD;
	IF tonPressureWatchdog.Q AND bPressureDataValid THEN&#xD;
		bPressureSensorFault := TRUE;&#xD;
		iPressureFaultCode := 11;&#xD;
	END_IF;&#xD;
END_IF;</Text></StructuredTextModel>