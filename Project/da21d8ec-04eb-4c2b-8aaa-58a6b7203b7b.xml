<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>(*&#xD;
		ADDITIVE DOSING PUMP CONTROL&#xD;
		COBOD INTERNATIONAL 2024 - JHJ&#xD;
		- - - - - - - - - - - - - - - - - - - - &#xD;
		&#xD;
		controls an analog dosing pump with low / empty feedback and fwd / rev controls&#xD;
		&#xD;
		- - - - - - - - - - - - - - - - - - - - &#xD;
		REVISIONS:&#xD;
		&#xD;
		V001	JHJ	2024					initial upload to Github&#xD;
		V002	JHJ	2024-04			made FB pump-agnostic to allow for manual change of analog scaling value&#xD;
		1.3.0		TA	2024-04-09		adding pump calibration routine&#xD;
													restructuring FB to use CASE instead of multi-level nested IF statements&#xD;
													"empty level" now prohibits pumping (but not emptying) &#xD;
		&#xD;
*)&#xD;
&#xD;
// - - - - - - - - - -   Rising / Falling edge detection   - - - - - - - - - - //&#xD;
fbRtrigEnable(Clk:=Enable);&#xD;
fbFtrigEnable(Clk:=Enable);&#xD;
&#xD;
fbRtrigCalibrate(Clk:=sAdditiveControl_Input.Calibration.ModeEnable);&#xD;
fbFtrigCalibrate(Clk:=sAdditiveControl_Input.Calibration.ModeEnable);&#xD;
&#xD;
// - - - - - - - - - -   R / F trig action   - - - - - - - - - - //&#xD;
// enable&#xD;
IF fbRtrigEnable.Q THEN&#xD;
	StepNo:=10;&#xD;
END_IF;&#xD;
&#xD;
IF fbFtrigEnable.Q and Busy THEN&#xD;
	StepNo:=9000;&#xD;
ELSIF fbFtrigEnable.Q AND NOT Busy THEN&#xD;
	StepNo:=9999;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
// calibration&#xD;
IF fbRtrigCalibrate.Q THEN&#xD;
	StepNo:=100;&#xD;
END_IF;&#xD;
&#xD;
IF fbFtrigCalibrate.Q AND Busy THEN&#xD;
	StepNo:=9000;&#xD;
ELSIF fbFtrigCalibrate.Q AND NOT Busy THEN&#xD;
	StepNo:=200;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
// - - - - - - - - - -   E movement check   - - - - - - - - - - //&#xD;
//establish if extruder is moving by checking absolute speed&#xD;
IF ABS(ax_driver_T1_E.Act.Vel) &gt; LREAL#1 THEN&#xD;
	ExtruderInStandstill:=FALSE;&#xD;
ELSIF ABS(ax_driver_T1_E.Act.Vel) &lt;= LREAL#1 THEN&#xD;
	ExtruderInStandstill:=TRUE;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
&#xD;
// - - - - - - - - - -   Code   - - - - - - - - - - //&#xD;
&#xD;
CASE StepNo OF &#xD;
	&#xD;
	// - - - - - - -   CASE: idle   - - - - - - - //&#xD;
	0: // idle while wait for activation&#xD;
		StepNo:=0;&#xD;
		&#xD;
	// - - - - - - -   CASE: prep FB   - - - - - - - //&#xD;
	10: // prep FB&#xD;
		StepNo:=200;&#xD;
&#xD;
&#xD;
	// - - - - - - -   CASE: calibration function   - - - - - - - //&#xD;
	100: // call calibration FB&#xD;
		fbPumpCalibration(&#xD;
			PumpControlSpeed=&gt;out_AdditiveSpeed,&#xD;
			PumpControlBit=&gt;ForwardSignal,&#xD;
			Enable:=TRUE,&#xD;
			ActivatePump:=sAdditiveControl_Input.Calibration.ManualPump,&#xD;
			PumpedAmount_measured:=sAdditiveControl_Input.Calibration.PumpedAmount,&#xD;
			CalculateScaleValue:=sAdditiveControl_Input.Calibration.ExecuteCalculation&#xD;
			);&#xD;
		&#xD;
		IF ForwardSignal THEN&#xD;
			PrintheadValve:=TRUE;&#xD;
		ELSE&#xD;
			PrintheadValve:=FALSE;&#xD;
		END_IF;&#xD;
		&#xD;
		Busy:=fbPumpCalibration.Busy;&#xD;
		&#xD;
		IF fbPumpCalibration.Done AND NOT fbPumpCalibration.Error THEN&#xD;
			// calibration successful, set new value&#xD;
			sAdditiveControl_Input.ScalingValue:=fbPumpCalibration.CalculatedNewScaleValue;&#xD;
			&#xD;
			fbPumpCalibration.Enable:=FALSE;&#xD;
			&#xD;
			PrintheadValve:=FALSE;&#xD;
			&#xD;
			StepNo:=200;&#xD;
			&#xD;
		ELSIF fbPumpCalibration.Done AND fbPumpCalibration.Error THEN&#xD;
			// calibration fb error&#xD;
			&#xD;
			fbPumpCalibration.Enable:=FALSE;&#xD;
			&#xD;
			PrintheadValve:=FALSE;&#xD;
			&#xD;
			StepNo:=9100;&#xD;
			&#xD;
		END_IF;&#xD;
	&#xD;
	&#xD;
	// - - - - - - -   CASE: pumping function   - - - - - - - //&#xD;
	200: // pump controls&#xD;
		// Disabling the Calibration fb so the timer can reset&#xD;
		fbPumpCalibration.Enable:=FALSE;&#xD;
		// - - - - - - -   analog scaling   - - - - - - - //&#xD;
		out_AdditiveSpeed:=LREAL_TO_INT(ScaleTrans(&#xD;
											SclIn:=sAdditiveControl_input.AdditiveOutputValue,&#xD;
											X0:=0,&#xD;
											Y0:=0,&#xD;
											X1:=sAdditiveControl_input.ScalingValue,&#xD;
											Y1:=8000&#xD;
											));&#xD;
&#xD;
&#xD;
		// - - - - - - -   level sensing   - - - - - - - //&#xD;
		IF LevelWarning AND NOT LevelEmpty THEN&#xD;
			sAdditiveControl_Input.PumpLow := TRUE;&#xD;
			sAdditiveControl_Input.PumpEmpty := FALSE;&#xD;
		ELSIF LevelEmpty THEN&#xD;
			sAdditiveControl_Input.PumpEmpty := TRUE;&#xD;
			sAdditiveControl_Input.PumpLow := FALSE;&#xD;
		ELSE&#xD;
			sAdditiveControl_Input.PumpLow := FALSE;&#xD;
			sAdditiveControl_Input.PumpEmpty := FALSE;&#xD;
		END_IF;&#xD;
		&#xD;
		&#xD;
		// - - - - - - -   fwd/rev signal, solenoid   - - - - - - - //&#xD;
		IF sAdditiveControl_Input.AdditivePumpStart THEN&#xD;
				// pump is enabled in HMI &#xD;
				&#xD;
				IF sAdditiveControl_Input.Fill AND NOT LevelEmpty THEN&#xD;
						// hose priming&#xD;
						ForwardSignal := TRUE;&#xD;
						ReverseSignal := FALSE;&#xD;
						PrintheadValve := TRUE;&#xD;
						&#xD;
						Busy:=TRUE;&#xD;
						&#xD;
				ELSIF sAdditiveControl_Input.Empty THEN&#xD;
						// hose purging&#xD;
						ForwardSignal := FALSE;&#xD;
						ReverseSignal := TRUE;&#xD;
						PrintheadValve := TRUE;&#xD;
						&#xD;
						Busy:=TRUE;&#xD;
						&#xD;
				ELSIF In_AdditivePump AND NOT LevelEmpty THEN&#xD;
						// dosing requested &amp; not empty&#xD;
						&#xD;
						IF NOT sAdditiveControl_Input.OnExtrude THEN&#xD;
							// pump always&#xD;
							&#xD;
							IF sAdditiveControl_Input.AdditivePumpForward OR sAdditiveControl_Input.AdditivePumpReverse THEN&#xD;
								// It is important to open the valve onlt if the user picked forward or reverse&#xD;
								ForwardSignal:=sAdditiveControl_Input.AdditivePumpForward;&#xD;
								ReverseSignal:=sAdditiveControl_Input.AdditivePumpReverse;&#xD;
								PrintheadValve := TRUE;&#xD;
								&#xD;
							ELSE&#xD;
								ForwardSignal:=sAdditiveControl_Input.AdditivePumpForward;&#xD;
								ReverseSignal:=sAdditiveControl_Input.AdditivePumpReverse;&#xD;
								PrintheadValve := FALSE;&#xD;
							&#xD;
							END_IF;&#xD;
							&#xD;
							Busy:=TRUE;&#xD;
							&#xD;
						ELSIF sAdditiveControl_Input.OnExtrude AND NOT ExtruderInStandstill THEN&#xD;
							// pump on extrude&#xD;
							&#xD;
							IF sAdditiveControl_Input.AdditivePumpForward OR sAdditiveControl_Input.AdditivePumpReverse THEN&#xD;
								// It is important to open the valve onlt if the user picked forward or reverse&#xD;
								ForwardSignal:=sAdditiveControl_Input.AdditivePumpForward;&#xD;
								ReverseSignal:=sAdditiveControl_Input.AdditivePumpReverse;&#xD;
								PrintheadValve := TRUE;&#xD;
								&#xD;
							ELSE&#xD;
								ForwardSignal:=sAdditiveControl_Input.AdditivePumpForward;&#xD;
								ReverseSignal:=sAdditiveControl_Input.AdditivePumpReverse;&#xD;
								PrintheadValve := FALSE;&#xD;
							&#xD;
							END_IF;&#xD;
							&#xD;
							Busy:=TRUE;&#xD;
							&#xD;
						ELSE&#xD;
							// pump not&#xD;
							ForwardSignal:=FALSE;&#xD;
							ForwardSignal:=FALSE;&#xD;
							PrintheadValve := FALSE;&#xD;
							&#xD;
							Busy:=FALSE;&#xD;
							&#xD;
						END_IF;&#xD;
						&#xD;
				ELSE&#xD;
						// do nothing&#xD;
						ForwardSignal := FALSE;&#xD;
						ReverseSignal := FALSE;&#xD;
						PrintheadValve := FALSE;&#xD;
						&#xD;
						Busy:=FALSE;&#xD;
						&#xD;
				END_IF;&#xD;
				&#xD;
		ELSE&#xD;
			//Turn everything off&#xD;
			ForwardSignal := FALSE;&#xD;
			ReverseSignal := FALSE;&#xD;
			PrintheadValve := FALSE;&#xD;
				&#xD;
		END_IF;	&#xD;
	&#xD;
	// - - - - - - -   CASE: Error handling   - - - - - - - //&#xD;
	9000: // fb was disabled incorrectly&#xD;
		Error:=TRUE;&#xD;
		// Disabling the Calibration fb so the timer can reset&#xD;
		fbPumpCalibration.Enable:=FALSE;&#xD;
		&#xD;
	9100: // calibration FB error&#xD;
		Error:=TRUE;&#xD;
		&#xD;
	&#xD;
		&#xD;
	// - - - - - - -   CASE: reset FB for re-execution   - - - - - - - //&#xD;
	9999: // reset FB before disable&#xD;
		fbPumpCalibration.Enable:=FALSE;&#xD;
		&#xD;
		ForwardSignal:=FALSE;&#xD;
		ReverseSignal:=FALSE;&#xD;
		PrintheadValve:=FALSE;&#xD;
		&#xD;
		Done:=FALSE;&#xD;
		Busy:=FALSE;&#xD;
		Error:=FALSE;&#xD;
		ErrorID:=0;&#xD;
		&#xD;
		StepNo:=0;&#xD;
	&#xD;
END_CASE;&#xD;
&#xD;
IF Error THEN &#xD;
	// set ErrorID&#xD;
	ErrorID:=StepNo;&#xD;
	Busy:=FALSE;&#xD;
	Done:=TRUE;&#xD;
END_IF;&#xD;
&#xD;
// - - - - - - - - - -   FB refresh   - - - - - - - - - - //&#xD;
fbPumpCalibration();&#xD;
&#xD;
</Text></StructuredTextModel>