<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>(*&#xD;
    SENSOR MONITOR - Flow and Pressure Sensor Monitoring with Filtering&#xD;
    developed for COBOD ADDITIVE PUMP SYSTEM&#xD;
    &#xD;
    Author: ahm@cbod.com&#xD;
    &#xD;
    REVISIONS:&#xD;
    V1.0.0    -    2025-10-17    -    AHM    -    Initial version with simulation support&#xD;
    &#xD;
    NOTE: Simulation code marked for removal when physical sensors arrive&#xD;
    &#xD;
    ERROR IDs:&#xD;
    1         -    Flow sensor below 4mA (wire break)&#xD;
    2         -    Flow sensor below 4.8mA (warning range)&#xD;
    3         -    Flow sensor above 23mA (wire short)&#xD;
    4         -    Flow sensor above 20mA (warning range)&#xD;
    5         -    Flow sensor watchdog timeout (no change in 30s)&#xD;
    10        -    Pressure sensor invalid data&#xD;
    11        -    Pressure sensor watchdog timeout (no change in 30s)&#xD;
    99000     -    Unknown FB step&#xD;
&#xD;
*)&#xD;
&#xD;
// - - - - - - - - - - - - - - - - - - - - INPUT EDGE DETECTION&#xD;
Execute_RE(Clk:=Execute);&#xD;
Execute_FE(Clk:=Execute);&#xD;
&#xD;
&#xD;
// - - - - - - - - - - - - - - - - - - - - START AND STOP OF FB&#xD;
IF Execute_RE.Q AND NOT Busy THEN&#xD;
    // set busy flag&#xD;
    Busy:=TRUE;&#xD;
    // start monitoring&#xD;
    fbStep:=10;&#xD;
END_IF;&#xD;
&#xD;
IF Execute_FE.Q AND Busy THEN&#xD;
    // cancel active sequence&#xD;
    fbStep:=800;&#xD;
ELSIF Execute_FE.Q AND NOT Busy THEN&#xD;
    // reset FB&#xD;
    fbStep:=900;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
// - - - - - - - - - - - - - - - - - - - - MAIN CODE CASE&#xD;
CASE fbStep OF &#xD;
    &#xD;
    // - - - - - - -   CASE 000: IDLE   - - - - - - - //&#xD;
    0: // idle&#xD;
        fbStep:=0;&#xD;
    &#xD;
    &#xD;
    // - - - - - - -   CASE 010: INITIALISE   - - - - - - - //&#xD;
    10: // initialise FB&#xD;
        &#xD;
        // reset ErrorID&#xD;
        ErrorID:=0;&#xD;
        &#xD;
        // Start startup timer&#xD;
        tonSensorStartup(IN:=TRUE, PT:=T#500MS);&#xD;
        &#xD;
        IF tonSensorStartup.Q THEN&#xD;
            bSensorsReady := TRUE;&#xD;
            fbStep:=100;&#xD;
        END_IF;&#xD;
    &#xD;
    &#xD;
    // - - - - - - -   CASE 100: SIMULATION MODE (REMOVE WHEN SENSORS ARRIVE)   - - - - - - - //&#xD;
    100: // handle simulation if enabled&#xD;
        // Copy inputs to working variables&#xD;
IF NOT bSimulationMode THEN&#xD;
    ai_Flow_4to20mA := ai_Flow_4to20mA_External;&#xD;
    awPressure_Data := awPressure_Data_External;&#xD;
    bPressure_StatusByte := bPressure_StatusByte_External;&#xD;
END_IF;&#xD;
&#xD;
        IF bSimulationMode THEN&#xD;
            // Flow sensor simulation (4-20mA)&#xD;
            iSimAnalog := REAL_TO_INT(((rSimFlow - 0.05) / 1.45) * 26214.0 + 6553.0);&#xD;
            &#xD;
            IF iSimAnalog &lt; 6553 THEN&#xD;
                iSimAnalog := 6553;&#xD;
            END_IF;&#xD;
            &#xD;
            IF iSimAnalog &gt; 32767 THEN&#xD;
                iSimAnalog := 32767;&#xD;
            END_IF;&#xD;
            &#xD;
            ai_Flow_Simulated := iSimAnalog;&#xD;
            &#xD;
            // Pressure sensor simulation (IO-Link)&#xD;
            wSimPressureRaw := REAL_TO_WORD((rSimPressure + 1.0) / 11.0 * 65535.0);&#xD;
            awPressure_Simulated[0] := WORD_TO_BYTE(SHR(wSimPressureRaw, 8));&#xD;
            awPressure_Simulated[1] := WORD_TO_BYTE(wSimPressureRaw);&#xD;
            bPressure_StatusByte_Simulated := 16#01;&#xD;
            &#xD;
            // Increment values for dynamic simulation&#xD;
            rSimFlow := rSimFlow + 0.02;&#xD;
            IF rSimFlow &gt; 1.5 THEN&#xD;
                rSimFlow := 0.05;&#xD;
            END_IF;&#xD;
            &#xD;
            rSimPressure := rSimPressure + 0.15;&#xD;
            IF rSimPressure &gt; 10.0 THEN&#xD;
                rSimPressure := -1.0;&#xD;
            END_IF;&#xD;
        END_IF;&#xD;
        &#xD;
        fbStep:=200;&#xD;
    &#xD;
    &#xD;
    // - - - - - - -   CASE 200: SENSOR MONITORING   - - - - - - - //&#xD;
    200: // read and process sensors&#xD;
    &#xD;
    // Copy inputs to working variables&#xD;
    IF NOT bSimulationMode THEN&#xD;
        ai_Flow_4to20mA := ai_Flow_4to20mA_External;&#xD;
        awPressure_Data := awPressure_Data_External;&#xD;
        bPressure_StatusByte := bPressure_StatusByte_External;&#xD;
    END_IF;&#xD;
    &#xD;
    // ========== SIMULATION MODE (override working variables) ==========&#xD;
    IF bSimulationMode THEN&#xD;
        // Flow sensor simulation&#xD;
        iSimAnalog := REAL_TO_INT(((rSimFlow - 0.05) / 1.45) * 26214.0 + 6553.0);&#xD;
        IF iSimAnalog &lt; 6553 THEN iSimAnalog := 6553; END_IF;&#xD;
        IF iSimAnalog &gt; 32767 THEN iSimAnalog := 32767; END_IF;&#xD;
        ai_Flow_4to20mA := iSimAnalog;  // Override working copy&#xD;
        &#xD;
        // Pressure sensor simulation&#xD;
        wSimPressureRaw := REAL_TO_WORD((rSimPressure + 1.0) / 11.0 * 65535.0);&#xD;
        awPressure_Data[0] := WORD_TO_BYTE(SHR(wSimPressureRaw, 8));&#xD;
        awPressure_Data[1] := WORD_TO_BYTE(wSimPressureRaw);&#xD;
        bPressure_StatusByte := 16#01;  // Override working copy&#xD;
        &#xD;
        // Increment simulation values&#xD;
        rSimFlow := rSimFlow + 0.02;&#xD;
        IF rSimFlow &gt; 1.5 THEN rSimFlow := 0.05; END_IF;&#xD;
        &#xD;
        rSimPressure := rSimPressure + 0.15;&#xD;
        IF rSimPressure &gt; 10.0 THEN rSimPressure := -1.0; END_IF;&#xD;
    END_IF;&#xD;
&#xD;
        // ========== FLOW SENSOR (4-20mA) ==========&#xD;
        &#xD;
        // Use simulated or real input (REMOVE IF block when sensors arrive)&#xD;
&#xD;
        &#xD;
        IF ai_Flow_4to20mA_External &lt; 5734 THEN&#xD;
            bFlowSensorFault := TRUE;&#xD;
            bFlowSensorWarning := FALSE;&#xD;
            rFlowRate_LPM_Raw := 0.0;&#xD;
            ErrorID := 1;&#xD;
            &#xD;
        ELSIF ai_Flow_4to20mA_External &lt; 6553 THEN&#xD;
            bFlowSensorFault := FALSE;&#xD;
            bFlowSensorWarning := TRUE;&#xD;
            rFlowRate_LPM_Raw := 0.0;&#xD;
            ErrorID := 2;&#xD;
            &#xD;
        ELSIF ai_Flow_4to20mA_External &gt; 37683 THEN&#xD;
            bFlowSensorFault := TRUE;&#xD;
            bFlowSensorWarning := FALSE;&#xD;
            rFlowRate_LPM_Raw := 1.5;&#xD;
            ErrorID := 3;&#xD;
            &#xD;
        ELSIF ai_Flow_4to20mA_External &gt; 32767 THEN&#xD;
            bFlowSensorFault := FALSE;&#xD;
            bFlowSensorWarning := TRUE;&#xD;
            rFlowRate_LPM_Raw := 1.5;&#xD;
            ErrorID := 4;&#xD;
            &#xD;
        ELSE&#xD;
            bFlowSensorFault := FALSE;&#xD;
            bFlowSensorWarning := FALSE;&#xD;
            ErrorID := 0;&#xD;
            &#xD;
           rFlowRate_LPM_Raw := ((INT_TO_REAL(ai_Flow_4to20mA) - 6553.0) / 26214.0) * 1.45 + 0.05;&#xD;
            &#xD;
            IF rFlowRate_LPM_Raw &lt; 0.05 THEN&#xD;
                rFlowRate_LPM_Raw := 0.0;&#xD;
            END_IF;&#xD;
            &#xD;
            IF rFlowRate_LPM_Raw &gt; 1.5 THEN&#xD;
                rFlowRate_LPM_Raw := 1.5;&#xD;
            END_IF;&#xD;
            &#xD;
        END_IF;&#xD;
        &#xD;
        // Flow filtering&#xD;
        arFlowHistory[iFlowFilterIndex] := rFlowRate_LPM_Raw;&#xD;
        iFlowFilterIndex := iFlowFilterIndex + 1;&#xD;
        IF iFlowFilterIndex &gt;= 10 THEN&#xD;
            iFlowFilterIndex := 0;&#xD;
        END_IF;&#xD;
        &#xD;
        rFlowRate_LPM := (arFlowHistory[0] + arFlowHistory[1] + arFlowHistory[2] + arFlowHistory[3] + arFlowHistory[4] +&#xD;
                          arFlowHistory[5] + arFlowHistory[6] + arFlowHistory[7] + arFlowHistory[8] + arFlowHistory[9]) / 10.0;&#xD;
        &#xD;
        &#xD;
        // ========== PRESSURE SENSOR (IO-Link) ==========&#xD;
        &#xD;
&#xD;
        &#xD;
        bPressureDataValid := (bPressure_StatusByte_External AND 16#01) = 16#01;&#xD;
        &#xD;
        IF bPressureDataValid THEN&#xD;
            bPressureSensorFault := FALSE;&#xD;
            &#xD;
            wPressure := SHL(BYTE_TO_WORD(awPressure_Data_External[0]), 8) OR BYTE_TO_WORD(awPressure_Data_External[1]);&#xD;
            rPressure_Bar_Raw := (WORD_TO_REAL(wPressure) / 65535.0) * 11.0 - 1.0;&#xD;
            &#xD;
            IF rPressure_Bar_Raw &lt; -1.0 THEN&#xD;
                rPressure_Bar_Raw := -1.0;&#xD;
            END_IF;&#xD;
            &#xD;
            IF rPressure_Bar_Raw &gt; 10.0 THEN&#xD;
                rPressure_Bar_Raw := 10.0;&#xD;
            END_IF;&#xD;
            &#xD;
        ELSE&#xD;
            bPressureSensorFault := TRUE;&#xD;
            ErrorID := 10;&#xD;
            &#xD;
        END_IF;&#xD;
        &#xD;
        // Pressure filtering&#xD;
        IF bPressureDataValid THEN&#xD;
            arPressureHistory[iPressureFilterIndex] := rPressure_Bar_Raw;&#xD;
            iPressureFilterIndex := iPressureFilterIndex + 1;&#xD;
            IF iPressureFilterIndex &gt;= 10 THEN&#xD;
                iPressureFilterIndex := 0;&#xD;
            END_IF;&#xD;
            &#xD;
            rPressure_Bar := (arPressureHistory[0] + arPressureHistory[1] + arPressureHistory[2] + arPressureHistory[3] + arPressureHistory[4] +&#xD;
                              arPressureHistory[5] + arPressureHistory[6] + arPressureHistory[7] + arPressureHistory[8] + arPressureHistory[9]) / 10.0;&#xD;
        END_IF;&#xD;
        &#xD;
        bAnySensorFault := bFlowSensorFault OR bPressureSensorFault;&#xD;
        bAnySensorWarning := bFlowSensorWarning;&#xD;
        &#xD;
        fbStep:=300;&#xD;
    &#xD;
    &#xD;
    // - - - - - - -   CASE 300: WATCHDOG MONITORING   - - - - - - - //&#xD;
    300: // monitor for stuck sensors&#xD;
        &#xD;
        // Flow watchdog&#xD;
        IF ABS(rFlowRate_LPM - rFlowRate_LPM_Last) &gt; 0.01 THEN&#xD;
            tonFlowWatchdog(IN:=FALSE);&#xD;
            rFlowRate_LPM_Last := rFlowRate_LPM;&#xD;
        ELSE&#xD;
            tonFlowWatchdog(IN:=TRUE, PT:=T#30S);&#xD;
            IF tonFlowWatchdog.Q AND (rFlowRate_LPM &gt; 0.05) THEN&#xD;
                bFlowSensorWarning := TRUE;&#xD;
                ErrorID := 5;&#xD;
            END_IF;&#xD;
        END_IF;&#xD;
        &#xD;
        // Pressure watchdog&#xD;
        IF ABS(rPressure_Bar - rPressure_Bar_Last) &gt; 0.05 THEN&#xD;
            tonPressureWatchdog(IN:=FALSE);&#xD;
            rPressure_Bar_Last := rPressure_Bar;&#xD;
        ELSE&#xD;
            tonPressureWatchdog(IN:=TRUE, PT:=T#30S);&#xD;
            IF tonPressureWatchdog.Q AND bPressureDataValid THEN&#xD;
                bPressureSensorFault := TRUE;&#xD;
                ErrorID := 11;&#xD;
            END_IF;&#xD;
        END_IF;&#xD;
        &#xD;
        Done := TRUE;&#xD;
        fbStep:=200;  // Loop back to continuous monitoring&#xD;
    &#xD;
    &#xD;
    // - - - - - - -   CASE 800: STOP FB   - - - - - - - //&#xD;
    800: // stop functions in controlled way and prep for reset&#xD;
        &#xD;
        bSensorsReady := FALSE;&#xD;
        tonSensorStartup(IN:=FALSE);&#xD;
        &#xD;
        fbStep:=900;&#xD;
        &#xD;
    // - - - - - - -   CASE 900: RESET FB   - - - - - - - //&#xD;
    900: // clear up and prepare for next execution&#xD;
    &#xD;
        Busy:=FALSE;&#xD;
        Done:=FALSE;&#xD;
        Error:=FALSE;&#xD;
        ErrorID:=0;&#xD;
        &#xD;
        bFlowSensorFault := FALSE;&#xD;
        bFlowSensorWarning := FALSE;&#xD;
        bPressureSensorFault := FALSE;&#xD;
        bAnySensorFault := FALSE;&#xD;
        bAnySensorWarning := FALSE;&#xD;
        &#xD;
        fbStep:=0;&#xD;
    &#xD;
ELSE&#xD;
        Error:=TRUE;&#xD;
        ErrorID:=99000;    // ERROR: unknown FB step        &#xD;
END_CASE;&#xD;
&#xD;
&#xD;
// - - - - - - - - - - - - - - - - - - - - refresh FBs&#xD;
tonSensorStartup();&#xD;
tonFlowWatchdog();&#xD;
tonPressureWatchdog();&#xD;
&#xD;
&#xD;
// - - - - - - - - - - - - - - - - - - - - FB ERROR HANDLING&#xD;
IF bAnySensorFault THEN&#xD;
    Error := TRUE;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
// - - - - - - - - - - - - - - - - - - - - CLEAR BUSY FLAG&#xD;
IF Error THEN&#xD;
        Busy:=FALSE;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
// - - - - - - - - - - - - - - - - - - - - FB StateID&#xD;
StateID:=fbStep;</Text></StructuredTextModel>