<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>(*&#xD;
		ADDITIVE DOSING PUMP CALIBRATION&#xD;
		COBOD INTERNATIONAL 2024 - TA&#xD;
		- - - - - - - - - - - - - - - - - - - - &#xD;
		&#xD;
		controls a dosing pump to dose material at 50% speed for as long as the user wants.&#xD;
		User inputs dosed amount in ml and the FB calculates the analog scaling value for the specific pump / liquid combination&#xD;
		&#xD;
		- - - - - - - - - - - - - - - - - - - - &#xD;
		REVISIONS:&#xD;
		&#xD;
		V1.0.0	TA	2024-04-08		initial upload to Github&#xD;
		&#xD;
*)&#xD;
&#xD;
&#xD;
// - - - - - - - - - -   Rising / Falling edge detection   - - - - - - - - - - //&#xD;
fbRtrigEnable(Clk:=Enable);&#xD;
fbFtrigEnable(Clk:=Enable);&#xD;
&#xD;
// - - - - - - - - - -   R / F trig action   - - - - - - - - - - //&#xD;
&#xD;
IF fbRtrigEnable.Q THEN&#xD;
	StepNo:=10;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
IF fbFtrigEnable.Q and Busy THEN&#xD;
	StepNo:=9000;&#xD;
ELSIF fbFtrigEnable.Q AND NOT Busy THEN&#xD;
	StepNo:=9999;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
&#xD;
// - - - - - - - - - -   Code   - - - - - - - - - - //&#xD;
&#xD;
CASE StepNo OF &#xD;
	&#xD;
	// - - - - - - -   CASE: idle   - - - - - - - //&#xD;
	0: // idle while wait for activation&#xD;
		StepNo:=0;&#xD;
&#xD;
&#xD;
	// - - - - - - -   CASE: calibration function   - - - - - - - //&#xD;
	10: // startup fb&#xD;
		Busy:=TRUE;&#xD;
		&#xD;
		//20 min timeout&#xD;
		fbAccumulateTimerTimeout.PT:=t#20m;&#xD;
		fbAccumulateTimerTimeout.In:=TRUE;&#xD;
		fbAccumulateTimerPump.Reset:=TRUE;&#xD;
		&#xD;
		StepNo:=100;&#xD;
		&#xD;
		&#xD;
	100: // pump material and accumulate time&#xD;
	&#xD;
		PumpControlBit:=ActivatePump;&#xD;
		PumpControlSpeed:=4000;&#xD;
		&#xD;
		fbAccumulateTimerPump.Reset:=FALSE;&#xD;
		fbAccumulateTimerPump.PT:=t#1h;&#xD;
		fbAccumulateTimerPump.In:=PumpControlBit;&#xD;
		&#xD;
		IF CalculateScaleValue THEN &#xD;
			StepNo:=200;&#xD;
			&#xD;
		ELSIF Enable=FALSE THEN&#xD;
			StepNo:=10;&#xD;
			&#xD;
		END_IF;&#xD;
		&#xD;
		(*IF fbAccumulateTimerTimeout.Q THEN&#xD;
			// timeout error&#xD;
			StepNo:=9005;&#xD;
		END_IF;*)&#xD;
		&#xD;
		&#xD;
	200: // calculate pump speed with time and amount&#xD;
		// pump speed at Aout 4000 in L/h&#xD;
		//																					mL to L																						sec to hr&#xD;
		calc_PumpSpeed:=(LINT_TO_LREAL(PumpedAmount_measured*1000)) / (LINT_TO_LREAL(TimeToSec(fbAccumulateTimerPump.ET))*60*60);&#xD;
		// !! we assume the pump scales linear&#xD;
		// pump speed at Aout 8000&#xD;
		CalculatedNewScaleValue:=2*calc_PumpSpeed;&#xD;
		&#xD;
		StepNo:=300;&#xD;
		&#xD;
		&#xD;
	// - - - - - - -   CASE: DONE   - - - - - - - //&#xD;
	300: // calculation done&#xD;
		Busy:=FALSE;&#xD;
		Done:=TRUE;&#xD;
			&#xD;
		&#xD;
	// - - - - - - -   CASE: Error handling   - - - - - - - //&#xD;
	9000: // fb was disabled incorrectly&#xD;
		Error:=TRUE;&#xD;
		&#xD;
		fbAccumulateTimerPump.In:=FALSE;&#xD;
		fbAccumulateTimerPump.Reset:=TRUE;&#xD;
		&#xD;
		fbAccumulateTimerTimeout.In:=FALSE;&#xD;
		fbAccumulateTimerTimeout.Reset:=TRUE;&#xD;
		&#xD;
	9002: // measuring timeout&#xD;
		Error:=TRUE;&#xD;
		&#xD;
		fbAccumulateTimerPump.In:=FALSE;&#xD;
		fbAccumulateTimerPump.Reset:=TRUE;&#xD;
		&#xD;
		fbAccumulateTimerTimeout.In:=FALSE;&#xD;
		fbAccumulateTimerTimeout.Reset:=TRUE;&#xD;
		&#xD;
	// - - - - - - -   CASE: reset FB for re-execution   - - - - - - - //&#xD;
	9999: // reset FB before disable&#xD;
		fbAccumulateTimerPump.Reset:=FALSE;&#xD;
		fbAccumulateTimerTimeout.Reset:=FALSE;&#xD;
		&#xD;
		CalculatedNewScaleValue:=0;&#xD;
		&#xD;
		Busy:=FALSE;&#xD;
		Done:=FALSE;&#xD;
		Error:=FALSE;&#xD;
		ErrorID:=0;&#xD;
		&#xD;
		StepNo:=0;&#xD;
END_CASE;&#xD;
&#xD;
&#xD;
// - - - - - - - - - -   Error handling   - - - - - - - - - - //&#xD;
&#xD;
IF Error THEN &#xD;
	// set ErrorID&#xD;
	ErrorID:=StepNo;&#xD;
	Busy:=FALSE;&#xD;
	Done:=FALSE;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
// - - - - - - - - - -   FB refresh   - - - - - - - - - - //&#xD;
fbAccumulateTimerPump();&#xD;
fbAccumulateTimerTimeout();&#xD;
&#xD;
</Text></StructuredTextModel>